{
	"title": "XML snippet",
	"language": "xml",
	"code": "<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" media=\"screen\" href=\"style.css\">\n  <title>JS</title>\n  <script type=\"text/javascript\"> </script>\n  <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\n<style>\n\u200b   nav {\n     display:none;\n    }\n    .static {\n     display:block;\n    }\n</style>\n<script>\n  $(document).ready(function(){\n  \u200b  $(\".rightsquare\").click(function(){\n            console.log(\"you clicked on Braun-T31\");\n            $(\"nav\").addClass(\"static\");\n          });\n          $(\"li:Station1\").click(function(){\n            console.log(\"you clicked on the first list item!\");\n            alert(\"yay!\");\n          });\n          $(\"li:Station2\").click(function(){\n            console.log(\"you clicked on the last list item!\");\n          });\n  \u200b         $(\"span\").click(function(){\n            console.log(\"you clicked on the close button!\");\n            $(\"nav\").removeClass(\"static\");\n          });\n        });\n  </script>\n  <title> am i dieter rams ? </title>\n</head>\n<body>\n<div id=\"background\"> </div>\n<div class=\"sidebar\">\n  <div class=\"topfiller\"> </div>\n  <div class=\"title\">\n    <h1> am i dieter rams ? </h1>\n  </div>\n  <div class=\"bottomfiller\"> </div>\n</div>\n\n<div class=\"rightsquare\" id=\"grid\">\n<nav>\n    <h4> Braun-T31 </h4>\n    <img src=\"Braun.jpg\" id=\"Braun-T31\" style=\"width:300px;\"> </img>\n      <div class=\"static\" id=\"static\"></div>\n    <ul class=\"stations\"\n      <li class=\"Station1\"> </li>\n      <li class=\"Station2\"></li>\n      <li class=\"Station3\"></li>\n    </ul>\n  </nav>\n  <span> close nav </span>\n  </div>\n\n</div>\n\n</body>\n</html>\n",
	"owner": "anonymous",
	"created": {
		"$date": "2017-08-29T21:51:03.000Z"
	},
	"stars": [],
	"tags": [
		"back-end"
	],
	"notes": [
		"these are some notes"
	]
}
{
	"title": "Javascript Snippet",
	"language": "javascript",
	"code": "Function.prototype.method = function(name, func) {\n    if(!this.prototype[name]) {\n        this.prototype[name] = func;\n    }\n    return this;\n};\n\nNumber.method('integer', function() {\n   return Math[this < 0 ? 'ceil' : 'floor'](this);\n});\n\ndocument.writeln((-10/3).integer());\n",
	"owner": "bjenkins",
	"created": {
		"$date": "2017-08-29T21:52:33.000Z"
	},
	"stars": [],
	"tags": [
		"front-end"
	],
	"notes": [
		"notes are fun"
	]
}
{
	"title": "Python Snippet",
	"language": "python",
	"code": "#!/usr/bin/python3\n\nhrs = input(\"Enter Hours:\")\nrate = input(\"Enter Rate:\")\n#Computing Overtime\nif float(hrs) > 40:\n  hrs_difference = float(hrs) - 40\n  #print(hrs_difference)\n  overtime_pay = float(hrs_difference *(rate * 1.5))\n  print(overtime_pay)\n  #total = str((float(hrs) * float(rate) + overtime_pay))\n  #print('Pay: ' , total)\nelse:\n  total = str(float(hrs) * float(rate))\n  print(\"Pay: \" ,total)\n\nError Message\nFile \"./total_hours.py\", line 9, in <module>\n    overtime_pay = float(hrs_difference *(rate * 1.5))\nTypeError: can't multiply sequence by non-int of type 'float'\n",
	"owner": "owner",
	"created": {
		"$date": "2017-08-29T23:51:00.000Z"
	},
	"stars": [],
	"tags": [
		"tags"
	],
	"notes": [
		[
			"notes"
		]
	]
}
{
	"title": "C snippet",
	"language": "c",
	"code": "\n//=========================================================================\n//=== Startprojekt zum Mikroprozessorpraktikum ============================\n//=========================================================================\n#include \"msp430x16x.h\"\t\t// Systemdefinitionen f\u00fcr den MSP430F1612\n#include \"init.h\"\t\t\t// Initialisierung des Mikrocontrollers\n#include \"system.h\"\t\t\t// Systemfunktionen MSB430H\n#include \"interrupts.h\"\t\t// ISR - Interrupt Service Routinen\n\n#include \"HW_CC1100.h\"\t\t// CC1100 868MHz Funk Transceiver\n#include \"HW_SHT11.h\"\t\t// SHT11 Feuchte- und Temperatursensor\n#include \"HW_MMA7260Q.h\"\t// MMA7260Q 3D-Beschleunigungssensor\n#include \"HW_LCD_TS.h\"\t\t// DOGM128 LCD Display Touchscreen\n#include \"HW_LCD.h\"\t\t\t// DOGM128 LCD Display\n\n#include \"stdio.h\"\t\t\t// Standard Libary\n#include \"string.h\"\t\t\t// Standard Libary\n//#include \"math.h\"\t\t\t// Standard Libary\n\n//#include \"aufgabe_x.h\"\t// Header Datei f\u00fcr aufgabe_x.c\n\t\t\t\t\t\t\t// m\u00f6glichst eigene xxx.h und xxx.c Dateien\n\t\t\t\t\t\t\t// erstellen und verwenden.\nmain(void);\t\t\t\t\t//Haupprogramm\nvoid print_value(void);\n\n//====Hauptprogramm=======================================================\nunsigned char wert = 0;\n\nmain(void)\n\t{\n//===Hier sollten Variablen deklariert werden ============================\n\t//unsigned char i = 0;\n\t//char text[60];\n\t//int x,y;\n\n//===Hier die notwendigen Initialisierungsschritte =======================\n//=(1)== Port-Initialisierung ============================================\n\tinit_Port();\t\t\t\t// Initialisierung der Port Register\n\n//(2)=== Clock-System-Initialisierung ====================================\n\t//== XT2() oder Dco() als Taktquelle einstellen\n\t//== durch Ein- oder Auskommentieren\n\t//== DCO ist bei LPM Einsatz bevorzugt mu\u00df zyklisch kalibriert werden\n\t//== XT2 ist quarzstabil mu\u00df nicht zyklisch kalibriert werden\n\t//\n\t//XT2 ();\t\t\t\t\t// XT2 Taktquelle aktivieren mit 7.3728MHz\n\tDCO ();\t\t\t\t\t// Dco Taktquelle aktivieren mit 7.3728MHz\n\t//\t\t\t\t\t\t   beachte DELTA\n\n//=(3)== Timer-Initialisierung= ==========================================\n\tinit_Timer_A();\t\t\t// Init Timer f\u00fcr Sekundeninterrupt\n\t\t\t\t\t\t\t// !! noch leere Funktion\n\n//=(4)== USART-Initialisierung ===========================================\n\tinit_UART1();\t\t\t// UART-RS232 mit 115.2kBit/s initialisieren\n\t\t\t\t\t\t\t// !! noch leere Funktion\n\n//=(5)== CC1100-Transceiver-Initialisierung ==============================\n\tinit_UART0_SPI();\t\t// CC1100 SPI UART initalisieren\n\tinit_CC1100();\t\t\t// CC1100 init und in RX Mode setzen\n\t\t\t\t\t\t\t// !!!Interrupte sind ab jetzt freigegeben!!\n\t//== Adresse und Funkkanal des Transceivers setzen\n\t//== f\u00fcr die Arbeitsplaetze HWPx (x=1...10) sollten\n\t//== ID=x und channnel=x gesetzt werden\n\tID = 1;\t\t\t\t\t\t\t// Adresse\n\tsetUid(ID);\t\t\t\t\t\t// Adresse im Transceiver setzen\n\tchannel = 1; \t\t\t\t\t// Funkkanal\n\tswitchFreq(channel);\t\t\t// Funkkanal im Transceiver setzen\n\t//== Soll der Transceiver genutzt werden m\u00fcssen folgende zwei Zeilen\n\t//== auskommentiert werden:\n\tinit_CC1100_IDLE();\t\t// CC1100 in den IDLE Mode setzen\n\tinit_CC1100_POWERDOWN();// CC1100 in den PowerDown Mode setzen\n\n//=(6)== LCD-Display-Initialisierung =====================================\n\tdogm_reset();\t\t// Hardware Reset des LCD Controllers\n\tdogm_init();\t\t// Initialisierung der LCD Controller Register\n\tlcd_clear(WHITE);\t// Grafikspeicher auf dem MSP430 l\u00f6schen\n\t//lcd_string(BLACK, 15, 25, \"MSP430-GESTARTET!\");\t// Textausgabe\n\tlcd_paint();\t\t// Grafikspeicher auf das LCD Display ausgeben\n\n#define BIT_SET(a,b) ((a) |= (b))\n#define BIT_CLR(a,b) ((a) &= ~(b))\n#define BIT_TOGGLE(a,b) ((a) ^= (b))\n\n#define LED_ROT (0x01)   // 0 0 1 P4.0\n#define LED_GELB (0x02)  // 0 1 0 P4.1\n#define LED_GRUEN (0x04) // 1 0 0 P4.2\n#define LED_ALL (LED_ROT | LED_GELB | LED_GRUEN)\n\n#define LED_ON(led) (BIT_CLR(P4OUT, led))\n#define LED_OFF(led) (BIT_SET(P4OUT, led))\n#define LED_TOGGLE(led) (BIT_TOGGLE(P4OUT, led))\n\n#define TASTE_LINKS (0x1)\n#define TASTE_RECHTS (0x2)\n\n#define SLEEP_QUANTUM 10000\n#define SLEEP(n) do { \\\n\tlong time = n * 100000; /* wait() sleeps 10*n microseconds */ \\\n\twhile(time > SLEEP_QUANTUM) { \\\n\t\twait(SLEEP_QUANTUM); \\\n\t\ttime -= SLEEP_QUANTUM; \\\n\t} \\\n\twait(time); \\\n} while(0)\n\n//print_value();\n\n// Schreiben ohne Passwort erzeugt ein RESET\n//#define MCU_RESET (WDTCTL = 0)\n\n// alle Leitungen auf Eingang\nTS_TIP_DIR_IN;\nTS_YP_DIR_IN;\nTS_YM_DIR_IN;\nTS_XP_DIR_IN;\nTS_XM_DIR_IN;\n// die Ausgangsregister vorbereitend setzen\nTS_XM_0; // XM X-Achse wird auf 0 gesetzt\nTS_TIP_1; // YP Y-Achse wird \u00fcber einen PullUp Widerstand auf 1 gezogen\n// Die Ausgaenge jetzt freigeben\nTS_XM_DIR_OUT;  // XM auf 0\nTS_TIP_DIR_OUT; // YP auf 1\n\n// P5.4 Input\nBIT_CLR(P1DIR, TASTE_LINKS | TASTE_RECHTS);\nBIT_SET(P1IES, 1 << 6); // HL an P1.6 loest interrupt aus\nBIT_SET(P1IE, 1 << 6);\t// interrupts fuer P1.6 erlauben\nBIT_CLR(P1IFG, 1 << 6);\t// interrupt flag loeschen\n\nLED_OFF(LED_ALL);\nLED_ON(LED_GELB);\n\n//BIT_SET(BCSCTL1, DIVA1);\n//WDTCTL = WDTPW + WDTCNTCL + WDTSSEL + WDTTMSEL;\n//BIT_SET(IE1, WDTIE);\n\n_bis_SR_register(GIE);\n\n//BIT_SET(BCSCTL1, DIVA0 | DIVA1);\n//WDTCTL = WDTPW + WDTCNTCL + WDTSSEL;\n//WDTCTL = WDTPW + ((WDTCTL & 0x7) & ~(WDTHOLD | WDTIS0 | WDTIS1));\n//BIT_CLR(WDTCTL, WDTHOLD);\n\n//===Hier die Endlosschleife quasi das Betriebssystem=====================\n\twhile(1){\n\t\tif (P1IN & TASTE_LINKS) {\n\t\t\tLED_OFF(LED_GELB);\n\t\t\tLED_ON(LED_GRUEN);\n\t\t\twhile(P1IN & TASTE_LINKS) {}\n\t\t\tLED_OFF(LED_GRUEN);\n\t\t\tLED_ON(LED_GELB);\n\t\t} else if (P1IN & TASTE_RECHTS) {\n\t\t\tLED_OFF(LED_GELB);\n\t\t\tLED_ON(LED_ROT);\n\t\t\twhile(P1IN & TASTE_RECHTS) {}\n\t\t\tLED_OFF(LED_ROT);\n\t\t\tLED_ON(LED_GELB);\n\t\t}\n\t}\t// Ende der Endlosschleife\n}\t\t// Ende Main\n//====Ende des Hauptprogramms ============================================\n\n#pragma vector = PORT1_VECTOR\n__interrupt void PORT1(void)\n{\n\tif (P1IFG) {\n\t\t// linke taste gedrueckt\n\t\tif (P1IN & TASTE_LINKS) {\n\t\t\twert--;\n\n\t\t// rechte taste gedrueckt\n\t\t} else if (P1IN & TASTE_RECHTS) {\n\t\t\twert++;\n\n\t\t// keine taste gedrueckt\n\t\t} else {\n\t\t\tLED_TOGGLE(LED_GELB);\n\t\t}\n\t\tBIT_CLR(P1IFG, 1 << 6);\n\t\tprint_value();\n\t}\n}\n\nvoid print_value(void)\n{\n\t\tchar string[256];\n\t\tsprintf(string, \"DEC %03d\\nHEX %03x\", wert, wert);\n\t\tlcd_clear(WHITE);\t// Grafikspeicher auf dem MSP430 l\u00f6schen\n\t\tlcd_string(BLACK, 15, 25, string);\t// Textausgabe\n\t\tlcd_paint();\t\t// Grafikspeicher auf das LCD Display ausgeben\n}\n",
	"owner": "eabell",
	"created": {
		"$date": "2017-07-21T23:55:29.000Z"
	},
	"stars": [],
	"tags": [],
	"notes": [
		[]
	]
}
{
	"title": "title",
	"language": "language",
	"code": "code",
	"owner": "owner",
	"created": {
		"$date": "2017-08-29T23:57:18.000Z"
	},
	"stars": [],
	"tags": [
		"tags"
	],
	"notes": [
		[
			"notes"
		]
	]
}
{
	"title": "title",
	"language": "language",
	"code": "code",
	"owner": "owner",
	"created": {
		"$date": "2017-08-29T23:58:27.000Z"
	},
	"stars": [],
	"tags": [
		"tags"
	],
	"notes": [
		[
			"notes"
		]
	]
}
{
	"title": "title",
	"language": "language",
	"code": "code",
	"owner": "owner",
	"created": {
		"$date": "2017-08-30T00:01:12.000Z"
	},
	"stars": [],
	"tags": [
		"tags"
	],
	"notes": [
		[
			"notes"
		]
	]
}
{
	"title": "title",
	"language": "language",
	"code": "code",
	"owner": "owner",
	"created": {
		"$date": "2017-08-30T00:04:32.000Z"
	},
	"stars": [],
	"tags": [
		"tags"
	],
	"notes": [
		[
			"notes"
		]
	]
}
